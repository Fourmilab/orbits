
    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    integer BODY = 3;               // Our body number


   /*                        _   _
              ___  __ _ _ __| |_| |__
             / _ \/ _` | '__| __| '_ \
            |  __/ (_| | |  | |_| | | |
             \___|\__,_|_|   \__|_| |_|
    */

    list termL0 = [
        1.75347045673, 0, 0,
        0.03341656456, 4.66925680417, 6283.0758499914,
        0.00034894275, 4.62610241759, 12566.1516999828,
        3.497056e-005, 2.74411800971, 5753.3848848968,
        3.417571e-005, 2.82886579606, 3.523118349,
        3.135896e-005, 3.62767041758, 77713.7714681205,
        2.676218e-005, 4.41808351397, 7860.4193924392,
        2.342687e-005, 6.13516237631, 3930.2096962196,
        1.324292e-005, 0.74246356352, 11506.7697697936,
        1.273166e-005, 2.03709655772, 529.6909650946,
        1.199167e-005, 1.10962944315, 1577.3435424478,
        9.9025e-006, 5.23268129594, 5884.9268465832,
        9.01855e-006, 2.04505443513, 26.2983197998,
        8.57223e-006, 3.50849156957, 398.1490034082,
        7.79786e-006, 1.17882652114, 5223.6939198022,
        7.53141e-006, 2.53339053818, 5507.5532386674,
        5.05264e-006, 4.58292563052, 18849.2275499742,
        4.92379e-006, 4.20506639861, 775.522611324,
        3.56655e-006, 2.91954116867, 0.0673103028,
        3.17087e-006, 5.84901952218, 11790.6290886588,
        2.84125e-006, 1.89869034186, 796.2980068164,
        2.71039e-006, 0.31488607649, 10977.078804699,
        2.4281e-006, 0.34481140906, 5486.777843175,
        2.0616e-006, 4.80646606059, 2544.3144198834,
        2.05385e-006, 1.86947813692, 5573.1428014331,
        2.02261e-006, 2.45767795458, 6069.7767545534,
        1.55516e-006, 0.83306073807, 213.299095438,
        1.32212e-006, 3.41118275555, 2942.4634232916,
        1.26184e-006, 1.0830263021, 20.7753954924,
        1.15132e-006, 0.64544911683, 0.9803210682,
        1.02851e-006, 0.63599846727, 4694.0029547076,
        1.01895e-006, 0.97569221824, 15720.8387848784,
        1.01724e-006, 4.26679821365, 7.1135470008,
        9.9206e-007, 6.20992940258, 2146.1654164752,
        9.7607e-007, 0.6810127227, 155.4203994342,
        8.5803e-007, 5.98322631256, 161000.685737674,
        8.5128e-007, 1.29870743025, 6275.9623029906,
        8.4711e-007, 3.67080093025, 71430.6956181291,
        7.9637e-007, 1.807913307, 17260.1546546904,
        7.8756e-007, 3.03698313141, 12036.4607348882,
        7.4651e-007, 1.75508916159, 5088.6288397668,
        7.3874e-007, 3.50319443167, 3154.6870848956,
        7.3547e-007, 4.67926565481, 801.8209311238,
        6.9627e-007, 0.83297596966, 9437.762934887,
        6.2449e-007, 3.97763880587, 8827.3902698748,
        6.1148e-007, 1.81839811024, 7084.8967811152,
        5.6963e-007, 2.78430398043, 6286.5989683404,
        5.6116e-007, 4.38694880779, 14143.4952424306,
        5.5577e-007, 3.47006009062, 6279.5527316424,
        5.1992e-007, 0.18914945834, 12139.5535091068,
        5.1605e-007, 1.33282746983, 1748.016413067,
        5.1145e-007, 0.28306864501, 5856.4776591154,
        4.9e-007, 0.48735065033, 1194.4470102246,
        4.1036e-007, 5.36817351402, 8429.2412664666,
        4.0938e-007, 2.39850881707, 19651.048481098,
        3.92e-007, 6.16832995016, 10447.3878396044,
        3.677e-007, 6.04133859347, 10213.285546211,
        3.6596e-007, 2.56955238628, 1059.3819301892,
        3.5954e-007, 1.70876111898, 2352.8661537718,
        3.5566e-007, 1.77597314691, 6812.766815086,
        3.3291e-007, 0.59309499459, 17789.845619785,
        3.0412e-007, 0.44294464135, 83996.8473181119,
        3.0047e-007, 2.73975123935, 1349.8674096588,
        2.5352e-007, 3.16470953405, 4690.4798363586
    ];

    list termL1 = [
        6283.31966747491, 0, 0,
        0.00206058863, 2.67823455584, 6283.0758499914,
        4.30343e-005, 2.63512650414, 12566.1516999828,
        4.25264e-006, 1.59046980729, 3.523118349,
        1.19261e-006, 5.79557487799, 26.2983197998,
        1.08977e-006, 2.96618001993, 1577.3435424478,
        9.3478e-007, 2.59212835365, 18849.2275499742,
        7.2122e-007, 1.13846158196, 529.6909650946,
        6.7768e-007, 1.87472304791, 398.1490034082,
        6.7327e-007, 4.40918235168, 5507.5532386674,
        5.9027e-007, 2.8879703846, 5223.6939198022,
        5.5976e-007, 2.17471680261, 155.4203994342,
        4.5407e-007, 0.39803079805, 796.2980068164,
        3.6369e-007, 0.46624739835, 775.522611324,
        2.8958e-007, 2.64707383882, 7.1135470008,
        2.0844e-007, 5.34138275149, 0.9803210682,
        1.9097e-007, 1.84628332577, 5486.777843175,
        1.8508e-007, 4.96855124577, 213.299095438,
        1.7293e-007, 2.99116864949, 6275.9623029906,
        1.6233e-007, 0.03216483047, 2544.3144198834,
        1.5832e-007, 1.43049285325, 2146.1654164752,
        1.4615e-007, 1.20532366323, 10977.078804699,
        1.2461e-007, 2.83432285512, 1748.016413067,
        1.1877e-007, 3.25804815607, 5088.6288397668,
        1.1808e-007, 5.2737979048, 1194.4470102246,
        1.1514e-007, 2.07502418155, 4694.0029547076,
        1.0641e-007, 0.76614199202, 553.5694028424,
        9.969e-008, 1.30262991097, 6286.5989683404,
        9.721e-008, 4.23925472239, 1349.8674096588,
        9.452e-008, 2.69957062864, 242.728603974,
        8.577e-008, 5.64475868067, 951.7184062506,
        7.576e-008, 5.30062664886, 2352.8661537718,
        6.385e-008, 2.65033984967, 9437.762934887,
        6.101e-008, 4.66632584188, 4690.4798363586
    ];

    list termL2 = [
        0.0005291887, 0, 0,
        8.719837e-005, 1.07209665242, 6283.0758499914,
        3.09125e-006, 0.86728818832, 12566.1516999828,
        2.7339e-007, 0.05297871691, 3.523118349,
        1.6334e-007, 5.18826691036, 26.2983197998,
        1.5752e-007, 3.6845788943, 155.4203994342,
        9.541e-008, 0.75742297675, 18849.2275499742,
        8.937e-008, 2.05705419118, 77713.7714681205,
        6.952e-008, 0.8267330541, 775.522611324,
        5.064e-008, 4.66284525271, 1577.3435424478,
        4.061e-008, 1.03057162962, 7.1135470008,
        3.81e-008, 3.4405080349, 5573.1428014331,
        3.463e-008, 5.14074632811, 796.2980068164,
        3.169e-008, 6.05291851171, 5507.5532386674,
        3.02e-008, 1.19246506441, 242.728603974,
        2.886e-008, 6.11652627155, 529.6909650946,
        2.714e-008, 0.30637881025, 398.1490034082,
        2.538e-008, 2.27992810679, 553.5694028424,
        2.371e-008, 4.38118838167, 5223.6939198022,
        2.079e-008, 3.75435330484, 0.9803210682
    ];

    list termL3 = [
        2.89226e-006, 5.84384198723, 6283.0758499914,
        3.4955e-007, 0, 0,
        1.6819e-007, 5.48766912348, 12566.1516999828,
        2.962e-008, 5.19577265202, 155.4203994342,
        1.288e-008, 4.72200252235, 3.523118349,
        7.14e-009, 5.30045809128, 18849.2275499742,
        6.35e-009, 5.96925937141, 242.728603974
    ];

    list termL4 = [
        1.14084e-006, 3.14159265359, 0,
        7.717e-008, 4.13446589358, 6283.0758499914,
        7.65e-009, 3.83803776214, 12566.1516999828
    ];

    list termL5 = [
        8.78e-009, 3.14159265359, 0
    ];

    list termB0 = [
        2.7962e-006, 3.19870156017, 84334.6615813083,
        1.01643e-006, 5.42248619256, 5507.5532386674,
        8.0445e-007, 3.88013204458, 5223.6939198022,
        4.3806e-007, 3.70444689758, 2352.8661537718,
        3.1933e-007, 4.00026369781, 1577.3435424478
    ];

    list termB1 = [
        9.03e-008, 3.8972906189, 5507.5532386674,
        6.177e-008, 1.73038850355, 5223.6939198022
    ];

    list termR0 = [
        1.00013988799, 0, 0,
        0.01670699626, 3.09846350771, 6283.0758499914,
        0.00013956023, 3.0552460962, 12566.1516999828,
        3.08372e-005, 5.19846674381, 77713.7714681205,
        1.628461e-005, 1.17387749012, 5753.3848848968,
        1.575568e-005, 2.84685245825, 7860.4193924392,
        9.24799e-006, 5.45292234084, 11506.7697697936,
        5.42444e-006, 4.56409149777, 3930.2096962196,
        4.7211e-006, 3.66100022149, 5884.9268465832,
        3.45983e-006, 0.96368617687, 5507.5532386674,
        3.2878e-006, 5.89983646482, 5223.6939198022,
        3.06784e-006, 0.29867139512, 5573.1428014331,
        2.43189e-006, 4.27349536153, 11790.6290886588,
        2.11829e-006, 5.84714540314, 1577.3435424478,
        1.85752e-006, 5.02194447178, 10977.078804699,
        1.74844e-006, 3.01193636534, 18849.2275499742,
        1.09835e-006, 5.05510636285, 5486.777843175,
        9.8316e-007, 0.88681311277, 6069.7767545534,
        8.6499e-007, 5.68959778254, 15720.8387848784,
        8.5825e-007, 1.27083733351, 161000.685737674,
        6.4903e-007, 0.27250613787, 17260.1546546904,
        6.2916e-007, 0.92177108832, 529.6909650946,
        5.7056e-007, 2.01374292014, 83996.8473181119,
        5.5736e-007, 5.24159798933, 71430.6956181291,
        4.9384e-007, 3.24501240359, 2544.3144198834,
        4.6963e-007, 2.57805070386, 775.522611324,
        4.4661e-007, 5.53715807302, 9437.762934887,
        4.2515e-007, 6.01110242003, 6275.9623029906,
        3.8968e-007, 5.36071738169, 4694.0029547076,
        3.8245e-007, 2.39255343974, 8827.3902698748,
        3.749e-007, 0.82952922332, 19651.048481098,
        3.6957e-007, 4.90107591914, 12139.5535091068,
        3.566e-007, 1.67468058995, 12036.4607348882,
        3.4537e-007, 1.84270693282, 2942.4634232916,
        3.3193e-007, 0.24370300098, 7084.8967811152,
        3.1921e-007, 0.18368229781, 5088.6288397668,
        3.1846e-007, 1.77775642085, 398.1490034082,
        2.8464e-007, 1.21344868176, 6286.5989683404,
        2.7793e-007, 1.89934330904, 6279.5527316424,
        2.6275e-007, 4.58896850401, 10447.3878396044
    ];

    list termR1 = [
        0.00103018608, 1.10748969588, 6283.0758499914,
        1.721238e-005, 1.06442301418, 12566.1516999828,
        7.02215e-006, 3.14159265359, 0,
        3.2346e-007, 1.02169059149, 18849.2275499742,
        3.0799e-007, 2.84353804832, 5507.5532386674,
        2.4971e-007, 1.31906709482, 5223.6939198022,
        1.8485e-007, 1.42429748614, 1577.3435424478,
        1.0078e-007, 5.91378194648, 10977.078804699,
        8.654e-008, 1.42046854427, 6275.9623029906,
        8.634e-008, 0.27146150602, 5486.777843175
    ];

    list termR2 = [
        4.359385e-005, 5.78455133738, 6283.0758499914,
        1.23633e-006, 5.57934722157, 12566.1516999828,
        1.2341e-007, 3.14159265359, 0,
        8.792e-008, 3.62777733395, 77713.7714681205,
        5.689e-008, 1.86958905084, 5573.1428014331,
        3.301e-008, 5.47027913302, 18849.2275499742
    ];

    list termR3 = [
        1.44595e-006, 4.27319435148, 6283.0758499914,
        6.729e-008, 3.91697608662, 12566.1516999828
    ];

    list termR4 = [
        3.858e-008, 2.56384387339, 6283.0758499914
    ];



    integer LM_EP_CALC = 431;           // Calculate ephemeris
    integer LM_EP_RESULT = 432;         // Ephemeris calculation result
    integer LM_EP_STAT = 433;           // Print memory status



    
        float fixangr(float a) {
            return a - (TWO_PI * (llFloor(a / TWO_PI)));
        }
    

    list posPlanet(integer jd, float jdf) {
        float tau = ((jd -  2451545 ) / 365250.0) + (jdf / 365250.0);
        float tau2 = tau * tau;
        float tau3 = tau2 * tau;
        float tau4 = tau3 * tau;
        float tau5 = tau4 * tau;

        float L = 0;
        float B = 0;
        float R = 0;

        integer i;
        integer n;
        float x;


    

        n = llGetListLength(termL0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL0, i) *
                llCos(llList2Float(termL0, i + 1) +
                      llList2Float(termL0, i + 2) * tau);
        }
        L += x * 1;
    
    
    

        n = llGetListLength(termL1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL1, i) *
                llCos(llList2Float(termL1, i + 1) +
                      llList2Float(termL1, i + 2) * tau);
        }
        L += x * tau;
    
    
    

        n = llGetListLength(termL2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL2, i) *
                llCos(llList2Float(termL2, i + 1) +
                      llList2Float(termL2, i + 2) * tau);
        }
        L += x * tau2;
    
    
    

        n = llGetListLength(termL3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL3, i) *
                llCos(llList2Float(termL3, i + 1) +
                      llList2Float(termL3, i + 2) * tau);
        }
        L += x * tau3;
    
    
    

        n = llGetListLength(termL4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL4, i) *
                llCos(llList2Float(termL4, i + 1) +
                      llList2Float(termL4, i + 2) * tau);
        }
        L += x * tau4;
    
    
    

        n = llGetListLength(termL5);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL5, i) *
                llCos(llList2Float(termL5, i + 1) +
                      llList2Float(termL5, i + 2) * tau);
        }
        L += x * tau5;
    
    

    

        n = llGetListLength(termB0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB0, i) *
                llCos(llList2Float(termB0, i + 1) +
                      llList2Float(termB0, i + 2) * tau);
        }
        B += x * 1;
    
    
    

        n = llGetListLength(termB1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB1, i) *
                llCos(llList2Float(termB1, i + 1) +
                      llList2Float(termB1, i + 2) * tau);
        }
        B += x * tau;
    
    

    

        n = llGetListLength(termR0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR0, i) *
                llCos(llList2Float(termR0, i + 1) +
                      llList2Float(termR0, i + 2) * tau);
        }
        R += x * 1;
    
    
    

        n = llGetListLength(termR1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR1, i) *
                llCos(llList2Float(termR1, i + 1) +
                      llList2Float(termR1, i + 2) * tau);
        }
        R += x * tau;
    
    
    

        n = llGetListLength(termR2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR2, i) *
                llCos(llList2Float(termR2, i + 1) +
                      llList2Float(termR2, i + 2) * tau);
        }
        R += x * tau2;
    
    
    

        n = llGetListLength(termR3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR3, i) *
                llCos(llList2Float(termR3, i + 1) +
                      llList2Float(termR3, i + 2) * tau);
        }
        R += x * tau3;
    
    
    

        n = llGetListLength(termR4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR4, i) *
                llCos(llList2Float(termR4, i + 1) +
                      llList2Float(termR4, i + 2) * tau);
        }
        R += x * tau4;
    
    


        return [ fixangr(L), B, R ];
    }



    default {
        state_entry() {
        }

        link_message(integer sender, integer num, string str, key id) {
            
                integer LM_AS_LEGEND = 541;         // Update floating text legend
                integer LM_AS_SETTINGS = 542;       // Update settings
                integer LM_AS_VERSION = 543;        // Check version consistency
            
            
            //  LM_EP_CALC (431): Calculate ephemeris

            if (num == LM_EP_CALC) {
                list args = llCSV2List(str);
                integer argn = llGetListLength(args);
                if (llList2Integer(args, 0) & (1 << BODY)) {
                    list eph = [ ];
                    integer i;

                    for (i = 1; (i + 1) < argn; i += 2) {
                        eph += posPlanet(llList2Integer(args, i),
                                         llList2Float(args, i + 1));
                    }
                    integer handle = llList2Integer(args, i);
                    llMessageLinked(LINK_THIS, LM_EP_RESULT,
                        (string) BODY + "," +
                        llList2CSV(eph + [ handle ]), id);
                }
            
            
                //  LM_AS_VERSION (543): Check version consistency
                } else if (num == LM_AS_VERSION) {
                    if ("0" != str) {
                        llOwnerSay(llGetScriptName() +
                                   " build mismatch: Deployer " + str +
                                   " Local 0");
                    }
            
            
            //  LM_EP_STAT (433): Print memory status

            } else if (num == LM_EP_STAT) {
                integer mFree = llGetFreeMemory();
                integer mUsed = llGetUsedMemory();
                llOwnerSay(llGetScriptName() + " status:" +
                     " Script memory.  Free: " + (string) mFree +
                        "  Used: " + (string) mUsed + " (" +
                        (string) ((integer) llRound((mUsed * 100.0) / (mUsed + mFree))) + "%)"
                );
            
            }
        }
    }


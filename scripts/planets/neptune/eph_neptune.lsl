
    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    integer BODY = 8;               // Our body number



    /*                        _
             _ __   ___ _ __ | |_ _   _ _ __   ___
            | '_ \ / _ \ '_ \| __| | | | '_ \ / _ \
            | | | |  __/ |_) | |_| |_| | | | |  __/
            |_| |_|\___| .__/ \__|\__,_|_| |_|\___|
                       |_|
    */

    list termL0 = [
        5.31188633047, 0, 0,
        0.01798475509, 2.9010127305, 38.1330356378,
        0.01019727662, 0.4858092366, 1.4844727083,
        0.00124531845, 4.83008090682, 36.6485629295,
        0.0004206445, 5.41054991607, 2.9689454166,
        0.00037714589, 6.09221834946, 35.1640902212,
        0.00033784734, 1.24488865578, 76.2660712756,
        0.00016482741, 7.729261e-005, 491.5579294568,
        9.198582e-005, 4.93747059924, 39.6175083461,
        8.994249e-005, 0.27462142569, 175.1660598002,
        4.216235e-005, 1.98711914364, 73.297125859,
        3.364818e-005, 1.03590121818, 33.6796175129,
        2.2848e-005, 4.20606932559, 4.4534181249,
        1.433512e-005, 2.78340432711, 74.7815985673,
        9.0024e-006, 2.07606702418, 109.9456887885,
        7.44996e-006, 3.19032530145, 71.8126531507,
        5.06206e-006, 5.74785370252, 114.3991069134,
        3.99552e-006, 0.34972342569, 1021.2488945514,
        3.45195e-006, 3.46186210169, 41.1019810544,
        3.40323e-006, 3.30369900416, 77.7505439839,
        3.23004e-006, 2.24815188609, 32.1951448046,
        3.06338e-006, 0.49684039897, 0.5212648618,
        2.87322e-006, 4.50523446022, 0.0481841098,
        2.8217e-006, 2.24565579693, 146.594251718,
        2.66605e-006, 4.88932609483, 0.9632078465,
        2.51941e-006, 5.78166597292, 388.4651552382,
        2.44722e-006, 1.24693337933, 9.5612275556,
        2.32887e-006, 2.50459795017, 137.0330241624,
        2.27079e-006, 1.79713054538, 453.424893819,
        1.70404e-006, 3.3239063065, 108.4612160802,
        1.51401e-006, 2.1915309428, 33.9402499438,
        1.5018e-006, 2.99706110414, 5.9378908332,
        1.48295e-006, 0.85948986145, 111.4301614968,
        1.18672e-006, 3.67706204305, 2.4476805548,
        1.093e-006, 2.41599378049, 183.2428146475,
        1.03305e-006, 0.04078966679, 0.2606324309,
        1.03054e-006, 4.40441222, 70.3281804424,
        1.01821e-006, 5.70539236951, 0.1118745846
    ];

    list termL1 = [
        38.37687716731, 0, 0,
        0.00016604187, 4.86319129565, 1.4844727083,
        0.00015807148, 2.27923488532, 38.1330356378,
        3.334701e-005, 3.6819967602, 76.2660712756,
        1.30584e-005, 3.67320813491, 2.9689454166,
        6.04832e-006, 1.50477747549, 35.1640902212,
        1.78623e-006, 3.45318524147, 39.6175083461,
        1.06537e-006, 2.45126138334, 4.4534181249,
        1.05747e-006, 2.7547932655, 33.6796175129,
        7.2684e-007, 5.48724732699, 36.6485629295,
        5.7355e-007, 1.85767603384, 114.3991069134,
        5.7069e-007, 5.2164980497, 0.5212648618,
        3.5368e-007, 4.51676827545, 74.7815985673,
        3.2216e-007, 5.9041148968, 77.7505439839,
        2.9871e-007, 3.67043294114, 388.4651552382,
        2.8866e-007, 5.16877529164, 9.5612275556,
        2.8742e-007, 5.16732589024, 2.4476805548,
        2.5507e-007, 5.24526281928, 168.0525127994
    ];

    list termL2 = [
        0.00053892649, 0, 0,
        2.95693e-006, 1.85520292248, 1.4844727083,
        2.81251e-006, 1.19084538887, 38.1330356378,
        2.7019e-006, 5.72143228148, 76.2660712756,
        2.3023e-007, 1.21035596452, 2.9689454166,
        9.057e-008, 4.42544992035, 35.1640902212,
        7.333e-008, 0.5403330683, 2.4476805548
    ];

    list termL3 = [
        3.1254e-007, 0, 0,
        1.4541e-007, 1.35337075856, 76.2660712756,
        1.2461e-007, 6.04431418812, 1.4844727083,
        1.1547e-007, 6.11257808366, 38.1330356378
    ];

    list termL4 = [
        1.13998e-006, 3.14159265359, 0
    ];

    list termB0 = [
        0.03088622933, 1.44104372626, 38.1330356378,
        0.00027780087, 5.91271882843, 76.2660712756,
        0.00027623609, 0, 0,
        0.00015448133, 3.50877080888, 39.6175083461,
        0.0001535549, 2.52123799481, 36.6485629295,
        1.999919e-005, 1.50998669505, 74.7815985673,
        1.96754e-005, 4.37778195768, 1.4844727083,
        1.015137e-005, 3.21561035875, 35.1640902212,
        6.05767e-006, 2.80246601405, 73.297125859,
        5.94878e-006, 2.12892708114, 41.1019810544,
        5.88805e-006, 3.18655882497, 2.9689454166,
        4.0183e-006, 4.16883287237, 114.3991069134,
        2.79964e-006, 1.68165309699, 77.7505439839,
        2.61647e-006, 3.76722704749, 213.299095438,
        2.54333e-006, 3.27120499438, 453.424893819,
        2.0559e-006, 4.25652348864, 529.6909650946,
        1.40455e-006, 3.52969556376, 137.0330241624
    ];

    list termB1 = [
        0.00227279214, 3.8079308987, 38.1330356378,
        1.80312e-005, 1.97576485377, 76.2660712756,
        1.4333e-005, 3.14159265359, 0,
        1.385733e-005, 4.82555548018, 36.6485629295,
        1.073298e-005, 6.08054240712, 39.6175083461,
        1.47903e-006, 3.85766231348, 74.7815985673,
        1.36448e-006, 0.47764957338, 1.4844727083,
        7.0285e-007, 6.18782052139, 35.1640902212,
        5.1899e-007, 5.05221791891, 73.297125859,
        4.2568e-007, 0.30721737205, 114.3991069134,
        3.7273e-007, 4.89476629246, 41.1019810544,
        3.7104e-007, 5.75999349109, 2.9689454166,
        2.6399e-007, 5.21566335936, 213.299095438
    ];

    list termB2 = [
        9.690766e-005, 5.57123750291, 38.1330356378,
        7.8815e-007, 3.62705474219, 76.2660712756,
        7.1523e-007, 0.4547668858, 36.6485629295,
        5.8646e-007, 3.14159265359, 0,
        2.9915e-007, 1.60671721861, 39.6175083461,
        6.472e-008, 5.60736756575, 74.7815985673
    ];

    list termB3 = [
        2.73423e-006, 1.01688979072, 38.1330356378,
        2.393e-008, 0, 0,
        2.274e-008, 2.36805657126, 36.6485629295,
        2.029e-008, 5.33364321342, 76.2660712756
    ];

    list termB4 = [
        5.728e-008, 2.66872693322, 38.1330356378
    ];

    list termR0 = [
        30.07013206102, 0, 0,
        0.2706225949, 1.3299945893, 38.1330356378,
        0.01691764281, 3.25186138896, 36.6485629295,
        0.00807830737, 5.18592836167, 1.4844727083,
        0.00537760613, 4.52113902845, 35.1640902212,
        0.00495725642, 1.57105654815, 491.5579294568,
        0.0027457197, 1.84552256801, 175.1660598002,
        0.00135134095, 3.37220607384, 39.6175083461,
        0.00121801825, 5.79754444303, 76.2660712756,
        0.00100895397, 0.37702748681, 73.297125859,
        0.00069791722, 3.79617226928, 2.9689454166,
        0.00046687838, 5.74937810094, 33.6796175129,
        0.00024593778, 0.50801728204, 109.9456887885,
        0.00016939242, 1.59422166991, 71.8126531507,
        0.00014229686, 1.07786112902, 74.7815985673,
        0.00012011825, 1.92062131635, 1021.2488945514,
        8.394731e-005, 0.67816895547, 146.594251718,
        7.5718e-005, 1.07149263431, 388.4651552382,
        5.720852e-005, 2.59059512267, 4.4534181249,
        4.839672e-005, 1.9068599107, 41.1019810544,
        4.483492e-005, 2.90573457534, 529.6909650946,
        4.420804e-005, 1.74993796503, 108.4612160802,
        4.35379e-005, 0.6798566237, 32.1951448046,
        4.270202e-005, 3.41343865825, 453.424893819,
        3.38093e-005, 0.84810683275, 183.2428146475,
        2.881063e-005, 1.98600105123, 137.0330241624,
        2.878942e-005, 3.67415901855, 350.3321196004,
        2.635535e-005, 3.09755943422, 213.299095438,
        2.530149e-005, 5.79839567009, 490.0734567485,
        2.523132e-005, 0.48630800015, 493.0424021651,
        2.306293e-005, 2.80962935724, 70.3281804424,
        2.087303e-005, 0.61858378281, 33.9402499438
    ];

    list termR1 = [
        0.00236338502, 0.70498011235, 38.1330356378,
        0.00013220279, 3.32015499895, 1.4844727083,
        8.621863e-005, 6.2162895163, 35.1640902212,
        2.70174e-005, 1.88140666779, 39.6175083461,
        2.154735e-005, 2.09431198086, 2.9689454166,
        2.15315e-005, 5.16873840979, 76.2660712756,
        1.603165e-005, 0, 0,
        1.463924e-005, 1.18417031047, 33.6796175129,
        1.135773e-005, 3.91891199655, 36.6485629295,
        8.9765e-006, 5.24122933533, 388.4651552382,
        7.89908e-006, 0.5331548458, 168.0525127994,
        7.6003e-006, 0.02051033644, 182.279606801,
        6.07183e-006, 1.0770650035, 1021.2488945514,
        5.71622e-006, 3.40060785432, 484.444382456,
        5.6079e-006, 2.88685815667, 498.6714764576
         ];

    list termR2 = [
        4.247412e-005, 5.89910679117, 38.1330356378,
        2.1757e-006, 0.3458182908, 1.4844727083,
        1.63025e-006, 2.2387294713, 168.0525127994,
        1.56285e-006, 4.59414467342, 182.279606801,
        1.27141e-006, 2.84786298079, 35.1640902212
     ];

    list termR3 = [
        1.66297e-006, 4.55243893489, 38.1330356378
    ];



    integer LM_EP_CALC = 431;           // Calculate ephemeris
    integer LM_EP_RESULT = 432;         // Ephemeris calculation result
    integer LM_EP_STAT = 433;           // Print memory status



    
        float fixangr(float a) {
            return a - (TWO_PI * (llFloor(a / TWO_PI)));
        }
    

    list posPlanet(integer jd, float jdf) {
        float tau = ((jd -  2451545 ) / 365250.0) + (jdf / 365250.0);
        float tau2 = tau * tau;
        float tau3 = tau2 * tau;
        float tau4 = tau3 * tau;
        float tau5 = tau4 * tau;

        float L = 0;
        float B = 0;
        float R = 0;

        integer i;
        integer n;
        float x;


    

        n = llGetListLength(termL0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL0, i) *
                llCos(llList2Float(termL0, i + 1) +
                      llList2Float(termL0, i + 2) * tau);
        }
        L += x * 1;
    
    
    

        n = llGetListLength(termL1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL1, i) *
                llCos(llList2Float(termL1, i + 1) +
                      llList2Float(termL1, i + 2) * tau);
        }
        L += x * tau;
    
    
    

        n = llGetListLength(termL2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL2, i) *
                llCos(llList2Float(termL2, i + 1) +
                      llList2Float(termL2, i + 2) * tau);
        }
        L += x * tau2;
    
    
    

        n = llGetListLength(termL3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL3, i) *
                llCos(llList2Float(termL3, i + 1) +
                      llList2Float(termL3, i + 2) * tau);
        }
        L += x * tau3;
    
    
    

        n = llGetListLength(termL4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL4, i) *
                llCos(llList2Float(termL4, i + 1) +
                      llList2Float(termL4, i + 2) * tau);
        }
        L += x * tau4;
    
    

    

        n = llGetListLength(termB0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB0, i) *
                llCos(llList2Float(termB0, i + 1) +
                      llList2Float(termB0, i + 2) * tau);
        }
        B += x * 1;
    
    
    

        n = llGetListLength(termB1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB1, i) *
                llCos(llList2Float(termB1, i + 1) +
                      llList2Float(termB1, i + 2) * tau);
        }
        B += x * tau;
    
    
    

        n = llGetListLength(termB2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB2, i) *
                llCos(llList2Float(termB2, i + 1) +
                      llList2Float(termB2, i + 2) * tau);
        }
        B += x * tau2;
    
    
    

        n = llGetListLength(termB3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB3, i) *
                llCos(llList2Float(termB3, i + 1) +
                      llList2Float(termB3, i + 2) * tau);
        }
        B += x * tau3;
    
    
    

        n = llGetListLength(termB4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB4, i) *
                llCos(llList2Float(termB4, i + 1) +
                      llList2Float(termB4, i + 2) * tau);
        }
        B += x * tau4;
    
    

    

        n = llGetListLength(termR0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR0, i) *
                llCos(llList2Float(termR0, i + 1) +
                      llList2Float(termR0, i + 2) * tau);
        }
        R += x * 1;
    
    
    

        n = llGetListLength(termR1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR1, i) *
                llCos(llList2Float(termR1, i + 1) +
                      llList2Float(termR1, i + 2) * tau);
        }
        R += x * tau;
    
    
    

        n = llGetListLength(termR2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR2, i) *
                llCos(llList2Float(termR2, i + 1) +
                      llList2Float(termR2, i + 2) * tau);
        }
        R += x * tau2;
    
    
    

        n = llGetListLength(termR3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR3, i) *
                llCos(llList2Float(termR3, i + 1) +
                      llList2Float(termR3, i + 2) * tau);
        }
        R += x * tau3;
    
    


        return [ fixangr(L), B, R ];
    }



    default {
        state_entry() {
        }

        link_message(integer sender, integer num, string str, key id) {
            
                integer LM_AS_LEGEND = 541;         // Update floating text legend
                integer LM_AS_SETTINGS = 542;       // Update settings
                integer LM_AS_VERSION = 543;        // Check version consistency
            
            
            //  LM_EP_CALC (431): Calculate ephemeris

            if (num == LM_EP_CALC) {
                list args = llCSV2List(str);
                integer argn = llGetListLength(args);
                if (llList2Integer(args, 0) & (1 << BODY)) {
                    list eph = [ ];
                    integer i;

                    for (i = 1; (i + 1) < argn; i += 2) {
                        eph += posPlanet(llList2Integer(args, i),
                                         llList2Float(args, i + 1));
                    }
                    integer handle = llList2Integer(args, i);
                    llMessageLinked(LINK_THIS, LM_EP_RESULT,
                        (string) BODY + "," +
                        llList2CSV(eph + [ handle ]), id);
                }
            
            
                //  LM_AS_VERSION (543): Check version consistency
                } else if (num == LM_AS_VERSION) {
                    if ("0" != str) {
                        llOwnerSay(llGetScriptName() +
                                   " build mismatch: Deployer " + str +
                                   " Local 0");
                    }
            
            
            //  LM_EP_STAT (433): Print memory status

            } else if (num == LM_EP_STAT) {
                integer mFree = llGetFreeMemory();
                integer mUsed = llGetUsedMemory();
                llOwnerSay(llGetScriptName() + " status:" +
                     " Script memory.  Free: " + (string) mFree +
                        "  Used: " + (string) mUsed + " (" +
                        (string) ((integer) llRound((mUsed * 100.0) / (mUsed + mFree))) + "%)"
                );
            
            }
        }
    }



    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    key owner;                          // UUID of owner
    key whoDat;                         // User with whom we're communicating

    
    //float tailtogg = 0; // Comet tail toggle
        //  Link messages

        integer LM_CO_COMA = 81;            // Set coma intensity
        integer LM_CO_SCALE = 82;           // Set scale factor
    
    
        integer LM_AS_LEGEND = 541;         // Update floating text legend
        integer LM_AS_SETTINGS = 542;       // Update settings
        integer LM_AS_VERSION = 543;        // Check version consistency
    

    head(float size) {
        if (size > 0) {
            llParticleSystem([

                //  System Behaviour
                PSYS_PART_FLAGS,
                                   PSYS_PART_EMISSIVE_MASK
                                 | PSYS_PART_FOLLOW_SRC_MASK
                                 | PSYS_PART_INTERP_COLOR_MASK
                                 | PSYS_PART_INTERP_SCALE_MASK,

                //  System Presentation
                PSYS_SRC_PATTERN,
                                PSYS_SRC_PATTERN_DROP,

                PSYS_SRC_BURST_RADIUS, 0.1,
                PSYS_SRC_ANGLE_BEGIN,  0,
                PSYS_SRC_ANGLE_END,    0.5,

                //  Particle appearance
                PSYS_PART_START_COLOR, <0, 0.8, 0.85098>,
                PSYS_PART_END_COLOR,   <0, 0.8, 0.85098>,
                PSYS_PART_START_ALPHA, 0.25,
                PSYS_PART_END_ALPHA,   0,
                PSYS_PART_START_SCALE, < 0.03, 0.03, 0.03 >,
                PSYS_PART_END_SCALE,   < 0.3, 0.3, 0.3 >,
                PSYS_PART_START_GLOW,  0.0,
                PSYS_PART_END_GLOW,    0.0,

                //  Particle Blending
                PSYS_PART_BLEND_FUNC_SOURCE,
                                           PSYS_PART_BF_SOURCE_ALPHA,
                PSYS_PART_BLEND_FUNC_DEST,
                                           PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA,

                //  Particle Flow
                PSYS_SRC_MAX_AGE,          0,
                PSYS_PART_MAX_AGE,         0.5 * size,
                PSYS_SRC_BURST_RATE,       0.02,
                PSYS_SRC_BURST_PART_COUNT, 4,

                //  Particle Motion
                PSYS_SRC_ACCEL,           <0, 0, 0>,
                PSYS_SRC_OMEGA,           <0, 0, 0>,
                PSYS_SRC_BURST_SPEED_MIN, 1,
                PSYS_SRC_BURST_SPEED_MAX, 1
            ]);
        } else {
            llParticleSystem([ ]);
        }
    }

    default {
        state_entry() {
            whoDat = owner = llGetOwner();
            head(0);
        }

        link_message(integer sender, integer num, string str, key id) {

            //  LM_CO_COMA (81): Set intensity of coma

            if (num == LM_CO_COMA) {
                head((float) str);

            //  LM_CO_SCALE (82): Scale coma with parent body size
            } else if (num == LM_CO_SCALE) {
                vector psize = llList2Vector(llGetLinkPrimitiveParams(LINK_THIS,
                    [ PRIM_SIZE ]), 0);
                psize *= (float) str;
                llSetLinkPrimitiveParamsFast(LINK_THIS, [
                    PRIM_SIZE, psize            // Scale to proper size
                ]);

            
                //  LM_AS_VERSION (543): Check version consistency
                } else if (num == LM_AS_VERSION) {
                    if ("0" != str) {
                        llOwnerSay(llGetScriptName() +
                                   " build mismatch: Deployer " + str +
                                   " Local 0");
                    }
            
            }
        }
    }

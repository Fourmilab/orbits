
    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    integer BODY = 1;               // Our body number


    /*       _ __ ___   ___ _ __ ___ _   _ _ __ _   _
            | '_ ` _ \ / _ \ '__/ __| | | | '__| | | |
            | | | | | |  __/ | | (__| |_| | |  | |_| |
            |_| |_| |_|\___|_|  \___|\__,_|_|   \__, |
                                                |___/
    */

    list termL0 = [
        4.40250710144, 0, 0,
        0.40989414976, 1.48302034194, 26087.9031415742,
        0.05046294199, 4.4778548954, 52175.8062831484,
        0.00855346843, 1.16520322351, 78263.7094247226,
        0.00165590362, 4.11969163181, 104351.612566297,
        0.00034561897, 0.77930765817, 130439.515707871,
        7.583476e-005, 3.7134840051, 156527.418849445,
        3.55974e-005, 1.51202669419, 1109.3785520934,
        1.803463e-005, 4.1033317841, 5661.3320491522,
        1.726012e-005, 0.35832239908, 182615.321991019,
        1.589923e-005, 2.99510417815, 25028.521211385,
        1.364682e-005, 4.59918318745, 27197.2816936676,
        1.017332e-005, 0.8803143904, 31749.2351907264,
        7.14182e-006, 1.54144865265, 24978.5245894808,
        6.43759e-006, 5.30266110787, 21535.9496445154,
        4.51137e-006, 6.04989275289, 51116.4243529592,
        4.042e-006, 3.28228847025, 208703.225132594,
        3.52441e-006, 5.24156297101, 20426.571092422,
        3.45212e-006, 2.79211901539, 15874.6175953632,
        3.43313e-006, 5.76531885335, 955.5997416086,
        3.39214e-006, 5.86327765, 25558.2121764796,
        3.25335e-006, 1.3367433478, 53285.1848352418,
        2.72947e-006, 2.49451163975, 529.6909650946,
        2.64336e-006, 3.91705094013, 57837.1383323006,
        2.59587e-006, 0.98732428184, 4551.9534970588,
        2.38793e-006, 0.11343953378, 1059.3819301892,
        2.3483e-006, 0.266721189, 11322.6640983044,
        2.16645e-006, 0.65987207348, 13521.7514415914,
        2.08995e-006, 2.09178234008, 47623.8527860896,
        1.83359e-006, 2.62878670784, 27043.5028831828,
        1.81629e-006, 2.43413502466, 25661.3049506982,
        1.75965e-006, 4.53636829858, 51066.427731055,
        1.72643e-006, 2.45200164173, 24498.8302462904,
        1.42316e-006, 3.36003948842, 37410.5672398786,
        1.37942e-006, 0.29098447849, 10213.285546211,
        1.25219e-006, 3.72079804425, 39609.6545831656,
        1.18233e-006, 2.78149786369, 77204.3274945334,
        1.06422e-006, 4.20572116254, 19804.8272915828
    ];

    list termL1 = [
        26088.1470622275, 0, 0,
        0.01126007832, 6.21703970996, 26087.9031415742,
        0.00303471395, 3.05565472363, 52175.8062831484,
        0.00080538452, 6.10454743366, 78263.7094247226,
        0.00021245035, 2.83531934452, 104351.612566297,
        5.592094e-005, 5.82675673328, 130439.515707871,
        1.472233e-005, 2.51845458395, 156527.418849445,
        3.88318e-006, 5.48039225891, 182615.321991019,
        3.52244e-006, 3.05238094403, 1109.3785520934,
        1.02743e-006, 2.14879173777, 208703.225132594,
        9.354e-007, 6.11791163931, 27197.2816936676,
        9.0579e-007, 0.00045481669, 24978.5245894808,
        5.1941e-007, 5.62107554052, 5661.3320491522,
        4.437e-007, 4.57348500464, 25028.521211385,
        2.807e-007, 3.04195430989, 51066.427731055,
        2.7295e-007, 5.09210138837, 234791.128274168
    ];

    list termL2 = [
        0.00053049845, 0, 0,
        0.00016903658, 4.69072300649, 26087.9031415742,
        7.396711e-005, 1.34735624669, 52175.8062831484,
        3.018297e-005, 4.45643539705, 78263.7094247226,
        1.107419e-005, 1.26226537554, 104351.612566297,
        3.78173e-006, 4.319980559, 130439.515707871,
        1.22998e-006, 1.06868541052, 156527.418849445,
        3.8663e-007, 4.08011610182, 182615.321991019,
        1.4898e-007, 4.6334308581, 1109.3785520934,
        1.1861e-007, 0.79187646439, 208703.225132594
    ];

    list termL3 = [
        1.88077e-006, 0.03466830117, 52175.8062831484,
        1.42152e-006, 3.125054526, 26087.9031415742,
        9.6877e-007, 3.00378171915, 78263.7094247226,
        4.3669e-007, 6.01867965826, 104351.612566297,
        3.5395e-007, 0, 0,
        1.8045e-007, 2.77538373991, 130439.515707871,
        6.971e-008, 5.81808665742, 156527.418849445,
        2.556e-008, 2.57014364454, 182615.321991019
    ];

    list termL4 = [
        1.14078e-006, 3.14159265359, 0,
        3.247e-008, 2.02848007619, 26087.9031415742,
        1.914e-008, 1.41731803758, 78263.7094247226,
        1.727e-008, 4.50137643801, 52175.8062831484,
        1.237e-008, 4.49970181057, 104351.612566297,
        6.45e-009, 1.26591776986, 130439.515707871
    ];

    list termL5 = [
        8.77e-009, 3.14159265359, 0
    ];

    list termB0 = [
        0.11737528962, 1.98357498767, 26087.9031415742,
        0.02388076996, 5.03738959685, 52175.8062831484,
        0.01222839532, 3.14159265359, 0,
        0.0054325181, 1.79644363963, 78263.7094247226,
        0.0012977877, 4.83232503961, 104351.612566297,
        0.00031866927, 1.58088495667, 130439.515707871,
        7.963301e-005, 4.60972126348, 156527.418849445,
        2.014189e-005, 1.35324164694, 182615.321991019,
        5.13953e-006, 4.37835409309, 208703.225132594,
        2.08584e-006, 2.02020294153, 24978.5245894808,
        2.07674e-006, 4.91772564073, 27197.2816936676,
        1.32013e-006, 1.11908492283, 234791.128274168,
        1.21395e-006, 1.81271752059, 53285.1848352418,
        1.00454e-006, 5.65684734206, 20426.571092422
    ];

    list termB1 = [
        0.00429151362, 3.50169780393, 26087.9031415742,
        0.00146233668, 3.14159265359, 0,
        0.00022675295, 0.0151536688, 52175.8062831484,
        0.00010894981, 0.48540174006, 78263.7094247226,
        6.353462e-005, 3.42943919982, 104351.612566297,
        2.495743e-005, 0.16051210665, 130439.515707871,
        8.59585e-006, 3.18452433647, 156527.418849445,
        2.77503e-006, 6.21020774184, 182615.321991019,
        8.6233e-007, 2.95244391822, 208703.225132594,
        2.7696e-007, 0.29068938889, 27197.2816936676,
        2.6133e-007, 5.97708962692, 234791.128274168
    ];

    list termB2 = [
        0.00011830934, 4.79065585784, 26087.9031415742,
        1.913516e-005, 0, 0,
        1.044801e-005, 1.21216540536, 52175.8062831484,
        2.66213e-006, 4.43418336532, 78263.7094247226,
        1.7028e-006, 1.62255638714, 104351.612566297,
        9.63e-007, 4.80023692017, 130439.515707871,
        4.4692e-007, 1.60758267772, 156527.418849445,
        1.8316e-007, 4.66904655377, 182615.321991019,
        6.927e-008, 1.4340488893, 208703.225132594
    ];

    list termB3 = [
        2.35423e-006, 0.35387524604, 26087.9031415742,
        1.60537e-006, 0, 0,
        1.8904e-007, 4.36275460261, 52175.8062831484,
        6.376e-008, 2.50715381439, 78263.7094247226,
        4.58e-008, 6.14257817571, 104351.612566297,
        3.061e-008, 3.12497552681, 130439.515707871,
        1.732e-008, 6.26642412058, 156527.418849445
    ];

    list termB4 = [
        4.276e-008, 1.74579932115, 26087.9031415742,
        1.023e-008, 3.14159265359, 0
    ];

    list termR0 = [
        0.39528271652, 0, 0,
        0.07834131817, 6.19233722599, 26087.9031415742,
        0.00795525557, 2.95989690096, 52175.8062831484,
        0.00121281763, 6.01064153805, 78263.7094247226,
        0.00021921969, 2.77820093975, 104351.612566297,
        4.354065e-005, 5.82894543257, 130439.515707871,
        9.18228e-006, 2.59650562598, 156527.418849445,
        2.89955e-006, 1.42441936951, 25028.521211385,
        2.60033e-006, 3.02817753482, 27197.2816936676,
        2.01855e-006, 5.6472504035, 182615.321991019,
        2.01499e-006, 5.59227724202, 31749.2351907264,
        1.4198e-006, 6.25264202645, 24978.5245894808,
        1.00144e-006, 3.73435608689, 21535.9496445154
    ];

    list termR1 = [
        0.00217347739, 4.65617158663, 26087.9031415742,
        0.00044141826, 1.42385543975, 52175.8062831484,
        0.00010094479, 4.47466326316, 78263.7094247226,
        2.432804e-005, 1.24226083435, 104351.612566297,
        1.624367e-005, 0, 0,
        6.03996e-006, 4.29303116561, 130439.515707871,
        1.52851e-006, 1.0606077981, 156527.418849445,
        3.9202e-007, 4.11136751416, 182615.321991019
     ];

    list termR2 = [
        3.117867e-005, 3.08231840296, 26087.9031415742,
        1.245396e-005, 6.15183317423, 52175.8062831484,
        4.24822e-006, 2.9258335296, 78263.7094247226,
        1.3613e-006, 5.97983925842, 104351.612566297,
        4.2175e-007, 2.74936980629, 130439.515707871,
        2.1759e-007, 3.14159265359, 0,
        1.2793e-007, 5.80143162209, 156527.418849445
     ];

    list termR3 = [
        3.2676e-007, 1.67971635359, 26087.9031415742,
        2.4166e-007, 4.63403168997, 52175.8062831484,
        1.2133e-007, 1.38983781545, 78263.7094247226,
        5.14e-008, 4.4391538693, 104351.612566297,
        1.981e-008, 1.20733880274, 130439.515707871
    ];



    integer LM_EP_CALC = 431;           // Calculate ephemeris
    integer LM_EP_RESULT = 432;         // Ephemeris calculation result
    integer LM_EP_STAT = 433;           // Print memory status



    
        float fixangr(float a) {
            return a - (TWO_PI * (llFloor(a / TWO_PI)));
        }
    

    list posPlanet(integer jd, float jdf) {
        float tau = ((jd -  2451545 ) / 365250.0) + (jdf / 365250.0);
        float tau2 = tau * tau;
        float tau3 = tau2 * tau;
        float tau4 = tau3 * tau;
        float tau5 = tau4 * tau;

        float L = 0;
        float B = 0;
        float R = 0;

        integer i;
        integer n;
        float x;


    

        n = llGetListLength(termL0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL0, i) *
                llCos(llList2Float(termL0, i + 1) +
                      llList2Float(termL0, i + 2) * tau);
        }
        L += x * 1;
    
    
    

        n = llGetListLength(termL1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL1, i) *
                llCos(llList2Float(termL1, i + 1) +
                      llList2Float(termL1, i + 2) * tau);
        }
        L += x * tau;
    
    
    

        n = llGetListLength(termL2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL2, i) *
                llCos(llList2Float(termL2, i + 1) +
                      llList2Float(termL2, i + 2) * tau);
        }
        L += x * tau2;
    
    
    

        n = llGetListLength(termL3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL3, i) *
                llCos(llList2Float(termL3, i + 1) +
                      llList2Float(termL3, i + 2) * tau);
        }
        L += x * tau3;
    
    
    

        n = llGetListLength(termL4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL4, i) *
                llCos(llList2Float(termL4, i + 1) +
                      llList2Float(termL4, i + 2) * tau);
        }
        L += x * tau4;
    
    
    

        n = llGetListLength(termL5);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termL5, i) *
                llCos(llList2Float(termL5, i + 1) +
                      llList2Float(termL5, i + 2) * tau);
        }
        L += x * tau5;
    
    

    

        n = llGetListLength(termB0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB0, i) *
                llCos(llList2Float(termB0, i + 1) +
                      llList2Float(termB0, i + 2) * tau);
        }
        B += x * 1;
    
    
    

        n = llGetListLength(termB1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB1, i) *
                llCos(llList2Float(termB1, i + 1) +
                      llList2Float(termB1, i + 2) * tau);
        }
        B += x * tau;
    
    
    

        n = llGetListLength(termB2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB2, i) *
                llCos(llList2Float(termB2, i + 1) +
                      llList2Float(termB2, i + 2) * tau);
        }
        B += x * tau2;
    
    
    

        n = llGetListLength(termB3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB3, i) *
                llCos(llList2Float(termB3, i + 1) +
                      llList2Float(termB3, i + 2) * tau);
        }
        B += x * tau3;
    
    
    

        n = llGetListLength(termB4);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termB4, i) *
                llCos(llList2Float(termB4, i + 1) +
                      llList2Float(termB4, i + 2) * tau);
        }
        B += x * tau4;
    
    

    

        n = llGetListLength(termR0);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR0, i) *
                llCos(llList2Float(termR0, i + 1) +
                      llList2Float(termR0, i + 2) * tau);
        }
        R += x * 1;
    
    
    

        n = llGetListLength(termR1);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR1, i) *
                llCos(llList2Float(termR1, i + 1) +
                      llList2Float(termR1, i + 2) * tau);
        }
        R += x * tau;
    
    
    

        n = llGetListLength(termR2);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR2, i) *
                llCos(llList2Float(termR2, i + 1) +
                      llList2Float(termR2, i + 2) * tau);
        }
        R += x * tau2;
    
    
    

        n = llGetListLength(termR3);
        x = 0;
        for (i = n - 3; i >= 0; i -= 3) {
            x += llList2Float(termR3, i) *
                llCos(llList2Float(termR3, i + 1) +
                      llList2Float(termR3, i + 2) * tau);
        }
        R += x * tau3;
    
    


        return [ fixangr(L), B, R ];
    }



    default {
        state_entry() {
        }

        link_message(integer sender, integer num, string str, key id) {
            
                integer LM_AS_LEGEND = 541;         // Update floating text legend
                integer LM_AS_SETTINGS = 542;       // Update settings
                integer LM_AS_VERSION = 543;        // Check version consistency
            
            
            //  LM_EP_CALC (431): Calculate ephemeris

            if (num == LM_EP_CALC) {
                list args = llCSV2List(str);
                integer argn = llGetListLength(args);
                if (llList2Integer(args, 0) & (1 << BODY)) {
                    list eph = [ ];
                    integer i;

                    for (i = 1; (i + 1) < argn; i += 2) {
                        eph += posPlanet(llList2Integer(args, i),
                                         llList2Float(args, i + 1));
                    }
                    integer handle = llList2Integer(args, i);
                    llMessageLinked(LINK_THIS, LM_EP_RESULT,
                        (string) BODY + "," +
                        llList2CSV(eph + [ handle ]), id);
                }
            
            
                //  LM_AS_VERSION (543): Check version consistency
                } else if (num == LM_AS_VERSION) {
                    if ("0" != str) {
                        llOwnerSay(llGetScriptName() +
                                   " build mismatch: Deployer " + str +
                                   " Local 0");
                    }
            
            
            //  LM_EP_STAT (433): Print memory status

            } else if (num == LM_EP_STAT) {
                integer mFree = llGetFreeMemory();
                integer mUsed = llGetUsedMemory();
                llOwnerSay(llGetScriptName() + " status:" +
                     " Script memory.  Free: " + (string) mFree +
                        "  Used: " + (string) mUsed + " (" +
                        (string) ((integer) llRound((mUsed * 100.0) / (mUsed + mFree))) + "%)"
                );
            
            }
        }
    }


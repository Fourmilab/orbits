
    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    integer ringDia = 140390;           // Ring system diameter (km)

    
        //  Planetary satellite message
        integer LM_PS_DEPMSG = 811;         // Message from deployer
        integer LM_PS_UPDATE = 812;         // Update position and rotation
    
    
        integer LM_PL_PINIT = 531;
    

    
        float siuf(string b) {
            integer a = llBase64ToInteger(b);
            if (0x7F800000 & ~a) {
                return llPow(2, (a | !a) + 0xffffff6a) *
                          (((!!(a = (0xff & (a >> 23)))) * 0x800000) |
                           (a & 0x7fffff)) * (1 | (a >> 31));
            }
            return (!(a & 0x7FFFFF)) * (float) "inf" * ((a >> 31) | 1);
        }
    

    default {

        state_entry() {
        }

        //  Process messages from other scripts
        link_message(integer sender, integer num, string str, key id) {

            //  Script Processor Messages

            //  LM_PL_PINIT (531): Initialise upon rez

            if (num == LM_PL_PINIT) {
                list msg = llJson2List(str);
                string ccmd = llList2String(msg, 0);

                if (ccmd == "PINIT") {
                    float m_scalePlanet = siuf(llList2String(msg, 4));  // Planet scale

                    //  Set properties of object
                    vector psize = < ringDia, ringDia, 5 > *
                        0.0001 * m_scalePlanet;
                    llSetLinkPrimitiveParamsFast(LINK_THIS, [
                        PRIM_SIZE, psize
                    ]);
                }

           //  LM_PS_DEPMSG (811): Deployer message forwarded by primary

            } else if (num == LM_PS_DEPMSG) {
                list msg = llJson2List(str);
                string ccmd = llList2String(msg, 0);

                if (FALSE) {                // Hack to use following macro
                
                    } else if (ccmd == "VERSION") {
                        if ("0" != llList2String(msg, 1)) {
                            llOwnerSay(llGetScriptName() +
                                       " build mismatch: Deployer " + llList2String(msg, 1) +
                                       " Local 0");
                        }
                
                }

            }
        }
     }

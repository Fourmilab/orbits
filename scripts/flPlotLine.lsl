
    
        /*  NOTE: This program was automatically generated by the Nuweb
            literate programming tool.  It is not intended to be modified
            directly.  If you wish to modify the code or use it in another
            project, you should start with the master, which is kept in the
            file orbits.w in the public GitHub repository:
                https://github.com/Fourmilab/orbits.git
            and is documented in the file orbits.pdf in the root directory
            of that repository.

            Build 0  1900-01-01 00:00  */
    

    key deployer;                       // ID of deployer who created us
    integer massChannel =  -982449822 ;   // Channel for communicating with deployer
    string ypres = "B?+:$$";            // It's pronounced "Wipers"

    //  List of selectable diameters for lines
    list diam =  [ 0.01, 0.015, 0.02, 0.025 ] ;

    default {

        on_rez(integer sparam) {
            if (llSubStringIndex(llGetObjectName(), "Permanent") < 0) {
                llSetLinkPrimitiveParamsFast(LINK_THIS, [ PRIM_TEMP_ON_REZ, TRUE ]);
            }

            deployer = llList2Key(llGetObjectDetails(llGetKey(),
                            [ OBJECT_REZZER_KEY ]), 0);

            //  Listen for messages from deployer
            llListen(massChannel, "", NULL_KEY, "");

            /*  Decode start parameter:
                    Bits        Content
                    23-22       Diameter (index into diam list)
                    21-10       Colour (RRRRGGGGBBBB, 0-63 scaled)
                     9-0        Length (0.01 to 10.24 metres)  */

            float len = 0.01 + ((sparam & 1023) / 100.0);

            integer colspec = (sparam >> 10) & 0xFFF;
            vector colour = < (colspec >> 8),
                              (colspec >> 4) & 0xF,
                              (colspec & 0xF) > /Â 15.0;

            float diameter = llList2Float(diam, (sparam >> 22) & 3);
            llSetLinkPrimitiveParamsFast(LINK_THIS, [
                PRIM_SIZE, < diameter, diameter, len >,
                PRIM_COLOR, ALL_SIDES, colour, 1
            ]);
        }

        listen(integer channel, string name, key id, string message) {
            if (channel == massChannel) {
                list msg = llJson2List(message);
                string ccmd = llList2String(msg, 0);

                if (id == deployer) {

                    //  Message from Deployer

                    //  ypres  --  Destroy object

                    if (ccmd == ypres) {
                        llDie();

                        
                            } else if (ccmd == "VERSION") {
                                if ("0" != llList2String(msg, 1)) {
                                    llOwnerSay(llGetScriptName() +
                                               " build mismatch: Deployer " + llList2String(msg, 1) +
                                               " Local 0");
                                }
                        
                    }
                }
            }
        }
    }
